{"version":3,"sources":["components/ScrollReveal.js","components/Header.js","components/Row.js","components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["ScrollReveal","Header","user","useEffect","sr","reveal","origin","duration","delay","distance","scale","className","Row","setSelectedMovie","useState","movies","setmovies","query","setQuery","class","value","onChange","e","preventDefault","target","fetch","then","res","json","data","Response","Search","console","log","type","placeholder","aria-label","id","map","movie","onClick","imdbID","src","Poster","alt","Title","Modal","selectedMovie","setMovie","settrailer","Year","response","items","classList","contains","Director","Actors","Genre","Rated","Runtime","BoxOffice","imdbRating","Metascore","Plot","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.147e18f6.chunk.js","sourcesContent":["import ScrollReveal from 'scrollreveal'\r\nexport default ScrollReveal()","import \"./Header.css\"\r\nimport sr from './ScrollReveal'\r\nimport { useEffect } from 'react'\r\n\r\nfunction Header({user}) {\r\n  useEffect(()=>{\r\n    const config = {\r\n        origin: 'top',\r\n        duration: 1000,\r\n        delay: 150,\r\n        distance: '500px',\r\n        scale: 1,\r\n        \r\n      }\r\n    sr.reveal('.header', config)\r\n  },[])\r\n\r\n    return (\r\n      <div className=\"header\">\r\n        <h1>Movies | {user} | React App</h1>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Header;\r\n  "," import { useState, useEffect } from 'react'\r\n import \"./Row.css\"\r\n import sr from './ScrollReveal'\r\n\r\n\r\nfunction Row({setSelectedMovie}) {\r\n  const [movies, setmovies] = useState([])\r\n  const [query, setQuery] = useState([\"\"])\r\n  \r\n\r\n  const onChange = e => {\r\n    e.preventDefault();\r\n\r\n    setQuery(e.target.value);\r\n\r\n    fetch(`http://www.omdbapi.com/?s=${e.target.value}&apikey=af3d009a`)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if(data.Response === 'True') {\r\n        setmovies(data.Search)\r\n        console.log(data.Search)\r\n      } else {\r\n        setmovies([])\r\n      };\r\n      \r\n    });\r\n  }\r\n  useEffect(()=>{\r\n    const config = {\r\n        \r\n        duration: 2000,\r\n        delay: 150,\r\n        distance: '500px',\r\n        scale: 1,\r\n        \r\n      }\r\n    sr.reveal('.container', config)\r\n  },[query])\r\n  \r\n    return (\r\n      <div className=\"container\">\r\n        <div className='Search bar mt-3'>\r\n          <input class=\"form-control\"\r\n          value={query}\r\n          onChange={onChange} type=\"text\"\r\n          placeholder=\"Search for movies\"\r\n          aria-label=\"default input example\">\r\n          </input>\r\n        </div>\r\n\r\n        <div className=\"movies\" id='row_movies'>\r\n          {movies.map(movie => (\r\n            <div className='movie'>\r\n              <div className='poster' onClick={() => setSelectedMovie(movie.imdbID)}>\r\n                <img src={movie.Poster} alt={movie.Title} />\r\n              </div>\r\n            </div>\r\n          ))}\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Row;","import './Modal.css';\r\nimport sr from './ScrollReveal'\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nfunction Modal({ selectedMovie, setSelectedMovie }) {\r\n    const [movie, setMovie] = useState(() => '');\r\n    const [trailer, settrailer] = useState(null);\r\n    \r\n    useEffect(()=>{\r\n        const config = {\r\n            origin: 'top',\r\n            duration: 2000,\r\n            delay: 150,\r\n            distance: '500px',\r\n          };\r\n        sr.reveal('.movie_page', config)\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        fetch(`http://www.omdbapi.com/?i=${selectedMovie}&apikey=af3d009a`)\r\n        .then((res) => res.json())\r\n        .then(data => setMovie(data))\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        fetch(`https://youtube-search-results.p.rapidapi.com/youtube-search/?q=${movie.Title}${movie.Year} trailer`, {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-key\": \"ea4ba8f6aamsh23ffbbac2f6a618p1bd384jsna311b8e29f36\",\r\n            \"x-rapidapi-host\": \"youtube-search-results.p.rapidapi.com\"\r\n        }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            data.items && settrailer(\"https://www.youtube.com/embed/\" + data.items[1].id)\r\n        })\r\n        \r\n        },[movie])\r\n    \r\n        const closeModal = (e) => {\r\n            if (e.target.classList.contains('backdrop')){\r\n                setSelectedMovie(null);\r\n            }\r\n        }\r\n    \r\n\r\n    return (\r\n        <div className=\"backdrop\" onClick={closeModal}>\r\n            \r\n                <div className='movie_page'>\r\n                    <div className='name'>\r\n                        {movie.Title} ({movie.Year})\r\n                    </div>\r\n                    <div className='poster'>\r\n                        <img src={movie.Poster} />\r\n                    </div>\r\n                    <div className='detail'>\r\n                        <div className='director'>\r\n                            <div className='title_box'>Director</div>\r\n                            <div className='body_box'>\r\n                                {movie.Director ? movie.Director:'Unkown'}\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        <div className='actors'>\r\n                            <div className='title_box'>Actors</div>\r\n                            <div className='body_box'>\r\n                                {movie.Actors ? movie.Actors:'Unkown'}\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        <div className='genre'>\r\n                            <div className='title_box'>Genre</div>\r\n                            <div className='body_box'>\r\n                                {movie.Genre ? movie.Genre:'Unkown'}\r\n                            </div>\r\n                           \r\n                        </div>\r\n                        <div className='rated'>\r\n                            <div className='title_box'>Rated</div>\r\n                            <div className='body_box'>\r\n                                {movie.Rated ? movie.Rated:'Unkown'}\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        <div className='time'>\r\n                            <div className='title_box'>Time</div>\r\n                            <div className='body_box'>\r\n                                {movie.Runtime ? movie.Runtime:'Unkown'}\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        <div className='boxOffice'>\r\n                            <div className='title_box'>boxOffice</div>\r\n                            <div className='body_box'>\r\n                                {movie.BoxOffice ? movie.BoxOffice:'Unkown'}\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        <div className='rates'>\r\n                            <div className='title_box'>Rates</div>\r\n                            <div className='body_box' id='rate_body_box'>\r\n                                <section className='body_box_sub'>{movie.imdbRating}</section>     \r\n                                <section className='body_box_sub'>{movie.Metascore}</section>\r\n                            </div>\r\n                        </div>\r\n                        <div className='plot'>\r\n                            <div className='title_box'>Plot</div>\r\n                            <div className='body_box'>\r\n                                {movie.Plot ? movie.Plot:'Unkown'}\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Modal;","import { useState } from 'react'\nimport './App.css';\nimport Header from './components/Header';\nimport Row from './components/Row';\nimport Modal from './components/Modal';\n\nfunction App() {\n  const [selectedMovie, setSelectedMovie] = useState(null)\n\n  return (\n    <div className=\"App\">\n      <Header user='Ariyan' />\n      <Row setSelectedMovie={setSelectedMovie} />\n      {selectedMovie && <Modal selectedMovie={selectedMovie} setSelectedMovie={setSelectedMovie} />}\n    </div>\n  );\n} \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}